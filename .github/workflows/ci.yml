#
# Copyright (c) 2022 ZettaScale Technology
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors:
#   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
#
name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, windows-2022, ubuntu-20.04]

    steps:
      - uses: actions/checkout@v4

      # Install NASM by ourselves instead of using prebuilt inside aws-lc
      - name: Install NASM
        uses: ilammy/setup-nasm@v1
        if: "${{ (matrix.os == 'windows-2019') || (matrix.os == 'windows-2022') }}"
      # We should upgrade gcc version inside Windows 2019 since it's too out-dated for aws-lc.
      # Fix the version to 12.2.0 due to the issue: https://github.com/egor-tensin/setup-mingw/issues/17#issuecomment-1890253793
      - name: Update MinGW
        uses: egor-tensin/setup-mingw@v2.2.0
        if: "${{ matrix.os == 'windows-2019' }}"
        with:
          version: 12.2.0 
      
      # Install the latest gcc version
      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        if: "${{ matrix.os == 'ubuntu-20.04' }}"
        with:
          version: 11

      - name: Install Rust toolchain (Windows)
        if: "${{ (matrix.os == 'windows-2019') || (matrix.os == 'windows-2022') }}"
        run: |
          rustup show
          rustup component add rustfmt clippy
          rustup target add x86_64-pc-windows-gnu

      - name: Install Rust toolchain (Ubuntu)
        if: "${{ matrix.os == 'ubuntu-20.04' }}"
        run: |
          rustup show
          rustup component add rustfmt clippy
          rustup target add x86_64-unknown-linux-gnu

      #- name: Code format check
      #  run: cargo fmt --check -- --config "unstable_features=true,imports_granularity=Crate,group_imports=StdExternalCrate"
      #- name: Clippy
      #  run: cargo clippy --all --examples -- -D warnings

      - name: Build all (Windows)
        if: "${{ (matrix.os == 'windows-2019') || (matrix.os == 'windows-2022') }}"
        run: cargo build --release --bins --lib --target x86_64-pc-windows-gnu

      - name: Build all (Ubuntu)
        if: "${{ matrix.os == 'ubuntu-20.04' }}"
        run: cargo build --release --bins --lib --target x86_64-unknown-linux-gnu

      - name: Run tests
        run: cargo test --verbose

  # NOTE: In GitHub repository settings, the "Require status checks to pass
  # before merging" branch protection rule ensures that commits are only merged
  # from branches where specific status checks have passed. These checks are
  # specified manually as a list of workflow job names. Thus we use this extra
  # job to signal whether all CI checks have passed.
  ci:
    name: CI status checks
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Check whether all jobs pass
        run: echo '${{ toJson(needs) }}' | jq -e 'all(.result == "success")'
